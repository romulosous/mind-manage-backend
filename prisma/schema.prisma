generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Psychologist {
  id          Int           @id @default(autoincrement())
  name        String
  email       String        @unique
  password    String
  crp         String
  specialty   String
  phone       String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
  Appointment Appointment[]
  Session     Session[]

  @@index([email])
  @@index([id])
}

model Patient {
  id                    Int                     @id @default(autoincrement())
  name                  String
  email                 String                  @unique
  password              String
  registration          String?
  course                Courses?
  education             Education?
  age                   Int
  phone                 String
  gender                Gender
  patientType           PatientType
  series                String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime?               @updatedAt
  psychologicalDisorder psychologicalDisorder[]
  relationship          Relationship[]
  createdBy             CreatedBy               @default(PSYCHOLOGIST)
  isActive              Boolean?                @default(true)
  Appointment           Appointment[]
  Session               Session[]
  Anamenese             Anamenese[]

  @@index([id])
  @@index([isActive])
  @@index([email])
}

enum Gender {
  MALE
  FEMALE
}

enum CreatedBy {
  PATIENT
  PSYCHOLOGIST
}

enum Education {
  MEDIO
  SUPERIOR
  POS_GRADUACAO
  TECNICO
  MESTRADO
}

enum Courses {
  FISICA
  QUIMICA
  ADS
  ELETROTECNICA
  ADMINISTRACAO
  INFORMATICA
}

enum PatientType {
  STUDENT
  CONTRACTOR
  GUARDIAN
  TEACHER
}

model Appointment {
  id              Int              @id @default(autoincrement())
  psychologistId  Int
  patientId       Int?
  appointmentDate DateTime?
  status          Status           @default(PENDING)
  reason          String?
  name            String?
  typeAcctivity   typeAcctivity?
  type            typeAppointment?
  observation     String?
  obejective      String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime?        @updatedAt
  Psychologist    Psychologist     @relation(fields: [psychologistId], references: [id])
  Patient         Patient?         @relation(fields: [patientId], references: [id])
  EmailSchedule   EmailSchedule[]

  @@index([status])
  @@index([type])
}

enum typeAppointment {
  SESSION
  COLLECTIVE_ACTIVITIES
  ADMINISTRATIVE_RECORDS
}

enum typeAcctivity {
  GROUP
  LECTURE
  SEMINAR
  MEETING
  DISCUSSION_CIRCLE
}

enum Status {
  PENDING
  CONFIRMED
  FINALIZED
  CANCELED
  ABSENCE
}

model Session {
  id             Int          @id @default(autoincrement())
  psychologistId Int
  patientId      Int
  sessionDate    String
  intervention   String?
  referrals      String?
  attachment     String?
  complaint      String?
  difficulty     String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime?    @updatedAt
  psychologist   Psychologist @relation(fields: [psychologistId], references: [id])
  patient        Patient      @relation(fields: [patientId], references: [id])
}

enum Difficulty {
  AVALIATION
  ORGANIZATION
  CONCENTRATION
  MEMORY
  TDAH
  COMUNICATION
}

enum psychologicalDisorder {
  DEPRESSION
  GENERALIZED_ANXIETY
  BIPOLAR_DISORDER
  BORDERLINE_PERSONALITY_DISORDER
  SCHIZOPHRENIA
  OBSESSIVE_COMPULSIVE_DISORDER
  POST_TRAUMATIC_STRESS_DISORDER
  ATTENTION_DEFICIT_HYPERACTIVITY_DISORDER
  AUTISM_SPECTRUM_DISORDER
  EATING_DISORDER
  SUBSTANCE_ABUSE
  PERSONALITY_DISORDER
  DISSOCIATIVE_DISORDER
  BODY_DYSMORPHIC_DISORDER
  PARANOID_DISORDER
  PANIC_DISORDER
  PSYCHOSIS
  OTHER
}

enum Relationship {
  RELATIONSHIP_WITH_COLLEAGUES
  RELATIONSHIP_WITH_FAMILY
  RELATIONSHIP_WITH_PARTNER
  RELATIONSHIP_WITH_TEACHER
  OTHER
}

model Anamenese {
  id            Int       @id @default(autoincrement())
  patientId     Int
  familyHistory String?
  infancy       String?
  adolescence   String?
  illnesses     String?
  acompaniment  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  Patient       Patient   @relation(fields: [patientId], references: [id])
}

model EmailSchedule {
  id            Int          @id @default(autoincrement())
  toEmail       String
  subject       String
  content       String
  sendAt        DateTime
  isSent        Boolean      @default(false)
  appointmentId Int?
  Appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime?    @updatedAt
}
